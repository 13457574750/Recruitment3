<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.soft.recruitment.dao.JobMapper" >
  <resultMap id="BaseResultMap" type="org.soft.recruitment.model.Job" >
    <id column="job_Id" property="jobId" jdbcType="INTEGER" />
    <result column="job_Name" property="jobName" jdbcType="VARCHAR" />
    <result column="job_Salary" property="jobSalary" jdbcType="VARCHAR" />
    <result column="job_Address" property="jobAddress" jdbcType="VARCHAR" />
    <result column="job_ER" property="jobEr" jdbcType="VARCHAR" />
    <result column="job_Education" property="jobEducation" jdbcType="VARCHAR" />
    <result column="job_Type" property="jobType" jdbcType="VARCHAR" />
    <result column="job_Release_Time" property="jobReleaseTime" jdbcType="VARCHAR" />
    <result column="job_Number" property="jobNumber" jdbcType="VARCHAR" />
    <result column="job_Welfare" property="jobWelfare" jdbcType="VARCHAR" />
    <result column="job_Content" property="jobContent" jdbcType="VARCHAR" />
    <result column="job_Requirements" property="jobRequirements" jdbcType="VARCHAR" />
    <result column="company_Id" property="companyId" jdbcType="VARCHAR" />


    <association property="company" resultMap="org.soft.recruitment.dao.CompanyMapper.BaseResultMap">
      <id column="company_Id" property="companyId"/>
      <result column="company_Name" property="companyName"/>
    </association>


  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    job_Id, job_Name, job_Salary, job_Address, job_ER, job_Education, job_Type, job_Release_Time, 
    job_Number, job_Welfare, job_Content, job_Requirements, company_Id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.soft.recruitment.model.JobExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from job
    where job_Id = #{jobId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from job
    where job_Id = #{jobId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.soft.recruitment.model.JobExample" >
    delete from job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.soft.recruitment.model.Job" >
    insert into job (job_Id, job_Name, job_Salary, 
      job_Address, job_ER, job_Education, 
      job_Type, job_Release_Time, job_Number, 
      job_Welfare, job_Content, job_Requirements, 
      company_Id)
    values (#{jobId,jdbcType=INTEGER}, #{jobName,jdbcType=VARCHAR}, #{jobSalary,jdbcType=VARCHAR}, 
      #{jobAddress,jdbcType=VARCHAR}, #{jobEr,jdbcType=VARCHAR}, #{jobEducation,jdbcType=VARCHAR}, 
      #{jobType,jdbcType=VARCHAR}, #{jobReleaseTime,jdbcType=VARCHAR}, #{jobNumber,jdbcType=VARCHAR}, 
      #{jobWelfare,jdbcType=VARCHAR}, #{jobContent,jdbcType=VARCHAR}, #{jobRequirements,jdbcType=VARCHAR}, 
      #{companyId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.soft.recruitment.model.Job" >
    insert into job
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="jobId != null" >
        job_Id,
      </if>
      <if test="jobName != null" >
        job_Name,
      </if>
      <if test="jobSalary != null" >
        job_Salary,
      </if>
      <if test="jobAddress != null" >
        job_Address,
      </if>
      <if test="jobEr != null" >
        job_ER,
      </if>
      <if test="jobEducation != null" >
        job_Education,
      </if>
      <if test="jobType != null" >
        job_Type,
      </if>
      <if test="jobReleaseTime != null" >
        job_Release_Time,
      </if>
      <if test="jobNumber != null" >
        job_Number,
      </if>
      <if test="jobWelfare != null" >
        job_Welfare,
      </if>
      <if test="jobContent != null" >
        job_Content,
      </if>
      <if test="jobRequirements != null" >
        job_Requirements,
      </if>
      <if test="companyId != null" >
        company_Id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="jobId != null" >
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="jobName != null" >
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobSalary != null" >
        #{jobSalary,jdbcType=VARCHAR},
      </if>
      <if test="jobAddress != null" >
        #{jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="jobEr != null" >
        #{jobEr,jdbcType=VARCHAR},
      </if>
      <if test="jobEducation != null" >
        #{jobEducation,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null" >
        #{jobType,jdbcType=VARCHAR},
      </if>
      <if test="jobReleaseTime != null" >
        #{jobReleaseTime,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null" >
        #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="jobWelfare != null" >
        #{jobWelfare,jdbcType=VARCHAR},
      </if>
      <if test="jobContent != null" >
        #{jobContent,jdbcType=VARCHAR},
      </if>
      <if test="jobRequirements != null" >
        #{jobRequirements,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        #{companyId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.soft.recruitment.model.JobExample" resultType="java.lang.Integer" >
    select count(*) from job
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update job
    <set >
      <if test="record.jobId != null" >
        job_Id = #{record.jobId,jdbcType=INTEGER},
      </if>
      <if test="record.jobName != null" >
        job_Name = #{record.jobName,jdbcType=VARCHAR},
      </if>
      <if test="record.jobSalary != null" >
        job_Salary = #{record.jobSalary,jdbcType=VARCHAR},
      </if>
      <if test="record.jobAddress != null" >
        job_Address = #{record.jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.jobEr != null" >
        job_ER = #{record.jobEr,jdbcType=VARCHAR},
      </if>
      <if test="record.jobEducation != null" >
        job_Education = #{record.jobEducation,jdbcType=VARCHAR},
      </if>
      <if test="record.jobType != null" >
        job_Type = #{record.jobType,jdbcType=VARCHAR},
      </if>
      <if test="record.jobReleaseTime != null" >
        job_Release_Time = #{record.jobReleaseTime,jdbcType=VARCHAR},
      </if>
      <if test="record.jobNumber != null" >
        job_Number = #{record.jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.jobWelfare != null" >
        job_Welfare = #{record.jobWelfare,jdbcType=VARCHAR},
      </if>
      <if test="record.jobContent != null" >
        job_Content = #{record.jobContent,jdbcType=VARCHAR},
      </if>
      <if test="record.jobRequirements != null" >
        job_Requirements = #{record.jobRequirements,jdbcType=VARCHAR},
      </if>
      <if test="record.companyId != null" >
        company_Id = #{record.companyId,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update job
    set job_Id = #{record.jobId,jdbcType=INTEGER},
      job_Name = #{record.jobName,jdbcType=VARCHAR},
      job_Salary = #{record.jobSalary,jdbcType=VARCHAR},
      job_Address = #{record.jobAddress,jdbcType=VARCHAR},
      job_ER = #{record.jobEr,jdbcType=VARCHAR},
      job_Education = #{record.jobEducation,jdbcType=VARCHAR},
      job_Type = #{record.jobType,jdbcType=VARCHAR},
      job_Release_Time = #{record.jobReleaseTime,jdbcType=VARCHAR},
      job_Number = #{record.jobNumber,jdbcType=VARCHAR},
      job_Welfare = #{record.jobWelfare,jdbcType=VARCHAR},
      job_Content = #{record.jobContent,jdbcType=VARCHAR},
      job_Requirements = #{record.jobRequirements,jdbcType=VARCHAR},
      company_Id = #{record.companyId,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.soft.recruitment.model.Job" >
    update job
    <set >
      <if test="jobName != null" >
        job_Name = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="jobSalary != null" >
        job_Salary = #{jobSalary,jdbcType=VARCHAR},
      </if>
      <if test="jobAddress != null" >
        job_Address = #{jobAddress,jdbcType=VARCHAR},
      </if>
      <if test="jobEr != null" >
        job_ER = #{jobEr,jdbcType=VARCHAR},
      </if>
      <if test="jobEducation != null" >
        job_Education = #{jobEducation,jdbcType=VARCHAR},
      </if>
      <if test="jobType != null" >
        job_Type = #{jobType,jdbcType=VARCHAR},
      </if>
      <if test="jobReleaseTime != null" >
        job_Release_Time = #{jobReleaseTime,jdbcType=VARCHAR},
      </if>
      <if test="jobNumber != null" >
        job_Number = #{jobNumber,jdbcType=VARCHAR},
      </if>
      <if test="jobWelfare != null" >
        job_Welfare = #{jobWelfare,jdbcType=VARCHAR},
      </if>
      <if test="jobContent != null" >
        job_Content = #{jobContent,jdbcType=VARCHAR},
      </if>
      <if test="jobRequirements != null" >
        job_Requirements = #{jobRequirements,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null" >
        company_Id = #{companyId,jdbcType=VARCHAR},
      </if>
    </set>
    where job_Id = #{jobId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.soft.recruitment.model.Job" >
    update job
    set job_Name = #{jobName,jdbcType=VARCHAR},
      job_Salary = #{jobSalary,jdbcType=VARCHAR},
      job_Address = #{jobAddress,jdbcType=VARCHAR},
      job_ER = #{jobEr,jdbcType=VARCHAR},
      job_Education = #{jobEducation,jdbcType=VARCHAR},
      job_Type = #{jobType,jdbcType=VARCHAR},
      job_Release_Time = #{jobReleaseTime,jdbcType=VARCHAR},
      job_Number = #{jobNumber,jdbcType=VARCHAR},
      job_Welfare = #{jobWelfare,jdbcType=VARCHAR},
      job_Content = #{jobContent,jdbcType=VARCHAR},
      job_Requirements = #{jobRequirements,jdbcType=VARCHAR},
      company_Id = #{companyId,jdbcType=VARCHAR}
    where job_Id = #{jobId,jdbcType=INTEGER}
  </update>

  <!-- 查询所有职位 -->
  <select id="findAllJob" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    com.company_Id,
    com.company_Name,
    com.company_Number,
    com.company_Address,
    com.company_Create_Time,
    j.job_Id,
    j.job_Name,
    j.job_Salary,
    j.job_Address,
    j.job_ER,
    j.job_Education,
    j.job_Type,
    j.job_Release_Time,
    j.job_Number,
    j.job_Welfare,
    j.job_Content,
    j.job_Requirements
    from job j
    inner join company com
    on j.company_Id=com.company_Id
    where 1=1
    <if test="jobName != null and jobName != ''">
      <bind name="jobName" value=" '%' + jobName + '%' "/>
      and j.job_name like #{jobName}
    </if>
    <if test="jobAddress != null and jobAddress != ''">
      <bind name="jobAddress" value=" '%' + jobAddress + '%' "/>
      and j.job_address like #{jobAddress}
    </if>
    <if test="companyName != null and companyName != ''">
      <bind name="companyName" value=" '%' + companyName + '%' "/>
      and com.company_name like #{companyName}
    </if>

  </select>
</mapper>